fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
return(list('vcov'=bread['X','X'],
'sandwich'= sandwich['X','X'],
'x' = fit$coefficients['X'],
'int' = fit$coefficients['(Intercept)']))
}
n_repl = 1000
d = NULL
for(i in 1:n_repl){
d = rbind(d,replicate_helper(n_exp))
}
d = rbind(d,data.frame(replicate_helper(n_exp)))
library('sandwich')
# Exercise 15
n_exp = 1000
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
print(vcov(fit))
# Exercise 16
# Yes, this is a copy of the code on the slides
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
print(sandwich)
#Exercise 17
replicate_helper <- function(n_exp){
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
return(list('vcov'=bread['X','X'],
'sandwich'= sandwich['X','X'],
'x' = fit$coefficients['X'],
'int' = fit$coefficients['(Intercept)']))
}
n_repl = 1000
d = NULL
for(i in 1:n_repl){
d = rbind(d,data.frame(replicate_helper(n_exp)))
}
n_repl = 1000
simulation = NULL
for(i in 1:n_repl){
simulation = rbind(simulation,data.frame(replicate_helper(n_exp)))
}
library('sandwich')
# Exercise 15
n_exp = 1000
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
print(vcov(fit))
# Exercise 16
# Yes, this is a copy of the code on the slides
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
print(sandwich)
#Exercise 17
replicate_helper <- function(n_exp){
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
return(list('Naive_Var'=bread['X','X'],
'Sandwich_Var'= sandwich['X','X'],
'B' = fit$coefficients['X'],
'X0' = fit$coefficients['(Intercept)']))
}
n_repl = 1000
simulation = NULL
for(i in 1:n_repl){
simulation = rbind(simulation,data.frame(replicate_helper(n_exp)))
}
ggplot(simulation) +
geom_density(aes(Naive_var,colour="Drawn"    ))
ggplot(simulation) +
geom_density(aes(Naive_Var,colour="Drawn"    ))
ggplot(simulation) +
geom_density(aes(Naive_Var,colour="Naive Variance"    )) +
geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
var(simulation$B)
p <- ggplot(simulation) +
p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p +  geom_vline(aes(colour = "Sampled variance"),
xintercept = var(simulation$B))
p <- ggplot(simulation)
p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p +  geom_vline(aes(colour = "Sampled variance"),
xintercept = var(simulation$B))
p <- ggplot(simulation)
p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(colour = "Sampled variance"),
xintercept = var(simulation$B))
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(colour = "Sampled variance"),
xintercept = var(simulation$B))
p
library('sandwich')
# Exercise 15
n_exp = 1000
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
print(vcov(fit))
# Exercise 16
# Yes, this is a copy of the code on the slides
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
print(sandwich)
#Exercise 17
replicate_helper <- function(n_exp){
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
return(list('Naive_Var'=bread['X','X'],
'Sandwich_Var'= sandwich['X','X'],
'B' = fit$coefficients['X'],
'X0' = fit$coefficients['(Intercept)']))
}
n_repl = 1000
simulation = NULL
for(i in 1:n_repl){
simulation = rbind(simulation,data.frame(replicate_helper(n_exp)))
}
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(colour = "Sampled variance"),
xintercept = var(simulation$B))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(colour = "Sampled variance"),
xintercept = var(simulation$B),
show_guide = TRUE)
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B,
colour = "Sampled variance")
))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
colour = "Sampled variance")
)
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
colour = "Sampled variance",
linetype="dashed")
)
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
colour = "Sampled variance"),
linetype="dashed")
)
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
colour = "Sampled variance")
)
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
colour = "Sampled Variance")
)
p <- p + labs(colour='Estimated Variance') + theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "")
)
p <- p + labs(colour='Estimated Variance', linetype = 'Sample Variance')
+ theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "")
)
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "")
)
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Sample Variance')
+ theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "-")
)
p <- p +   ggtitle("Comparison of the distributions")
+   xlab('Var '+expression(beta[1]))
+   ylab('Density')
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Sample Variance')
+ theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "-")
)
p <- p +   ggtitle("Comparison of the distributions")
+   xlab(expression(beta[1]))
+   ylab('Density')
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Sample Variance')
+ theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "-")
)
p <- p +   ggtitle("Comparison of the distributions") +
xlab(expression(beta[1])) +
ylab('Density')
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Sample Variance') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "-")
)
p <- p +   ggtitle("Distribution of the estimated density") +
xlab(Variance) +
ylab('Density')
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Sample Variance') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="Naive Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "-")
)
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Sample Variance') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance")
)
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Estimated Variance')+labs(linetype = 'Mean Values') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
linetype = "Sandwich Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
linetype = "MLE Variance"))
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of obtained values')+
labs(linetype = 'Mean Values') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
colour="MLE Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
colour="Sandwich Variance" ))
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of obtained values')+
labs(linetype = 'Mean Values') +
theme(plot.title = element_text(hjust = 0.5))
p
library('sandwich')
# Exercise 15
n_exp = 1000
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
print(vcov(fit))
# Exercise 16
# Yes, this is a copy of the code on the slides
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
print(sandwich)
#Exercise 17
replicate_helper <- function(n_exp){
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
return(list('Naive_Var'=bread['X','X'],
'Sandwich_Var'= sandwich['X','X'],
'B' = fit$coefficients['X'],
'X0' = fit$coefficients['(Intercept)']))
}
n_repl = 1000
simulation = NULL
for(i in 1:n_repl){
simulation = rbind(simulation,data.frame(replicate_helper(n_exp)))
}
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
colour="MLE Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
colour="Sandwich Variance" ))
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of obtained values')+
labs(linetype = 'Mean Values') +
theme(plot.title = element_text(hjust = 0.5))
p
library('sandwich')
# Exercise 15
n_exp = 1000
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
print(vcov(fit))
# Exercise 16
# Yes, this is a copy of the code on the slides
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
print(sandwich)
#Exercise 17
replicate_helper <- function(n_exp){
X = rnorm(n_exp)
Y = rnbinom(n_exp, size = 1/3., mu = exp(X/100))
Y = rpois(n_exp, lambda =  exp(X/100))
Test = data.frame(X,Y)
fit <- glm(Y ~ X, data = Test, poisson(link = "log"))
bread=vcov(fit)
score=estfun(fit)
meat=t(score)%*%score
sandwich=bread%*%meat%*%bread
return(list('Naive_Var'=bread['X','X'],
'Sandwich_Var'= sandwich['X','X'],
'B' = fit$coefficients['X'],
'X0' = fit$coefficients['(Intercept)']))
}
n_repl = 10000
simulation = NULL
for(i in 1:n_repl){
simulation = rbind(simulation,data.frame(replicate_helper(n_exp)))
}
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
colour="MLE Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
colour="Sandwich Variance" ))
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of obtained values')+
labs(linetype = 'Mean Values') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
colour="MLE Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
colour="Sandwich Variance" ))
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of\n obtained values')+
labs(linetype = 'Mean Values') +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
colour="MLE Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
colour="Sandwich Variance" ))
p <- p +   ggtitle("Distribution of the estimated density") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of\nestimated values')+
labs(linetype = 'Mean Value') +
theme(plot.title = element_text(hjust = 0.5))
p
fit
vcov(fit)
1.077278e-03**.5
sandwich
0.0039673505e-03**.5
0.0039673505**.5
p <- ggplot(simulation)
p <- p +  geom_density(aes(Naive_Var,colour="MLE Variance"    ))
p <- p +  geom_density(aes(Sandwich_Var,colour="Sandwich Variance"    ))
p <- p +  geom_vline(aes(xintercept = var(simulation$B),
linetype = "Sample Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Naive_Var),
colour="MLE Variance"))
p <- p +  geom_vline(aes(xintercept = mean(simulation$Sandwich_Var),
colour="Sandwich Variance" ))
p <- p +   ggtitle("Distribution of the estimated variance") +
xlab('Variance') +
ylab('Density')
p <- p + labs(colour='Distribution of\nestimated values')+
labs(linetype = 'Mean Value') +
theme(plot.title = element_text(hjust = 0.5))
p
